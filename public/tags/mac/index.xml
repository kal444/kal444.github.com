<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Write More</title>
    <link>http://kal444.github.io/tags/mac/index.xml</link>
    <description>Recent content on Write More</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://kal444.github.io/tags/mac/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mount shares on OS X on Login and Wakeup</title>
      <link>http://kal444.github.io/2013/10/24/mount-shares-on-login-wakeup/</link>
      <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/10/24/mount-shares-on-login-wakeup/</guid>
      <description>

&lt;p&gt;I bought a macbook air recently. This is my first mac, but I am very familiar with Unix/Linux. This is part of a series of posts on using OS X (Mountain Lion).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{{site.url}}/osx-automount-mds-oddity/&#34;&gt;Last time&lt;/a&gt;, I wanted to use automount to mount a Samba share at a fixed location. It didn&amp;rsquo;t work as I expected.&lt;/p&gt;

&lt;p&gt;This time around, I am going to go the simple route and use &lt;code&gt;launchd&lt;/code&gt; to mount the share whenever I login.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;launchd &amp;ndash; System wide and per-user daemon/agent manager&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, you can use launchd to launch things. :) It&amp;rsquo;s great!&lt;/p&gt;

&lt;h3 id=&#34;launch-a-script-at-login&#34;&gt;Launch a script at login&lt;/h3&gt;

&lt;p&gt;According to &lt;code&gt;man launchd&lt;/code&gt;, user specific launching instructions are stored in &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt;. It&amp;rsquo;s pretty easy to figure out the syntax just by looking at the examples that&amp;rsquo;s already there. But for the comprehensive explanation on the plist format for &lt;code&gt;launchd&lt;/code&gt;, look at &lt;code&gt;man launchd.plist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I ended up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
	&amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;com.yellowaxe.berunda-mounts&amp;lt;/string&amp;gt;
	&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
	&amp;lt;array&amp;gt;
		&amp;lt;string&amp;gt;/Users/kal/usr/bin/berunda-mount-shares&amp;lt;/string&amp;gt;
	&amp;lt;/array&amp;gt;
	&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s important to put in the full path to your script instead of &lt;code&gt;~kal/usr/bin/berunda-mount-shares&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can then load this .plist file using &lt;code&gt;launchctl load ~/Library/LaunchAgents/&amp;lt;plist-file-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;berunda-mount-shares&#34;&gt;&lt;code&gt;berunda-mount-shares&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

for i in `seq 1 9`; do
  # wait until interface is active again.
  # is there a better way to do this?
  ifconfig en0 | grep -q &#39;status: active&#39; &amp;amp;&amp;amp; break;
  sleep 5
done

ping -q -c1 berunda &amp;gt;/dev/null || exit; # server not up

pw=$(security find-internet-password -w -a kal -s berunda)

mount | grep -q /opt/kyle/berunda/media &amp;amp;&amp;amp; exit; # already mounted
mount -t smbfs smb://kal:$pw@berunda/media /opt/kyle/berunda/media
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The for loop is put in to wait for the network interface to become active. This seems to be needed more for the wakeup step. I added some additional changes for server&amp;rsquo;s status and if the mount is already there.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;security find-internet-password&lt;/code&gt; is a great way to find your password in the OS X keychain. You do have to store the password in the keychain first&amp;hellip; The easiest way is to mount the share in Finder and have it remember your password.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that the mount command WILL expose your password on the command line (briefly) since it passes the password to &lt;code&gt;mount_smbfs&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;launching-a-script-when-the-laptop-wakes-up&#34;&gt;Launching a script when the laptop wakes up&lt;/h3&gt;

&lt;p&gt;For completeness, I wanted to unmount a share when the computer sleeps and remount it when the computer wakes back up. For this, I turn to: &lt;a href=&#34;http://www.bernhard-baehr.de/&#34;&gt;SleepWatcher&lt;/a&gt;. However, I am not going to install it from the site&amp;hellip;&lt;/p&gt;

&lt;p&gt;Thanks to a friend, I was turned onto &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. It&amp;rsquo;s a simple &lt;code&gt;brew install sleepwatcher&lt;/code&gt; to install this.&lt;/p&gt;

&lt;p&gt;Running SleepWatcher involves our old friend &lt;code&gt;launchd&lt;/code&gt; again. Here is the .plist file to use.&lt;/p&gt;

&lt;h4 id=&#34;de-bernhard-baehr-sleepwatcher-plist&#34;&gt;&lt;code&gt;de.bernhard-baehr.sleepwatcher.plist&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
	&amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;de.bernhard-baehr.sleepwatcher&amp;lt;/string&amp;gt;
	&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
	&amp;lt;array&amp;gt;
		&amp;lt;string&amp;gt;/usr/local/sbin/sleepwatcher&amp;lt;/string&amp;gt;
		&amp;lt;string&amp;gt;-V&amp;lt;/string&amp;gt;
                &amp;lt;string&amp;gt;-s /Users/kal/usr/bin/on-sleep&amp;lt;/string&amp;gt;
                &amp;lt;string&amp;gt;-w /Users/kal/usr/bin/on-wakeup&amp;lt;/string&amp;gt;
	&amp;lt;/array&amp;gt;
	&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;
	&amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;on-wakeup&lt;/code&gt; just simply calls &lt;code&gt;~kal/usr/bin/berunda-mount-shares&lt;/code&gt; and &lt;code&gt;on-sleep&lt;/code&gt; calls &lt;code&gt;~kal/usr/bin/berunda-umount-shares&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And to finish this out.&lt;/p&gt;

&lt;h4 id=&#34;berunda-umount-shares&#34;&gt;&lt;code&gt;berunda-umount-shares&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

ping -q -c1 berunda &amp;gt;/dev/null || exit; # server not up

mount | grep -q /opt/kyle/berunda/media || exit; # already unmounted
umount /opt/kyle/berunda/media
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, this has been working great.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automount Oddity in OS X with Spotlight metadata server (mds)</title>
      <link>http://kal444.github.io/2013/10/19/osx-automount-mds-oddity/</link>
      <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/10/19/osx-automount-mds-oddity/</guid>
      <description>

&lt;p&gt;I bought a macbook air recently. This is my first mac, but I am very familiar with Unix/Linux. This is part of a series of posts on using OS X (Mountain Lion).&lt;/p&gt;

&lt;h3 id=&#34;a-simple-thing&#34;&gt;A Simple Thing&lt;/h3&gt;

&lt;p&gt;I have a NAS with a Samba share that I&amp;rsquo;d like to mount on the mac at a &lt;em&gt;fixed location&lt;/em&gt; and have it to be usable by my user &lt;em&gt;always&lt;/em&gt;. The same share might be mounted by another user on the same mac, but it can be at a different mount point. This simplifies things a bit. The mount point doesn&amp;rsquo;t have to have open permission for all users.&lt;/p&gt;

&lt;h3 id=&#34;using-finder&#34;&gt;Using Finder&lt;/h3&gt;

&lt;p&gt;Using Finder, the first attempt is to use &lt;code&gt;Go -&amp;gt; Connect To Server...&lt;/code&gt;. This automatically puts the mount as &lt;code&gt;/Volumes/&amp;lt;sharename&amp;gt;&lt;/code&gt;. Not so bad if you have only 1 share to deal with. But if multiple users try to mount the same share, you will end up with &lt;code&gt;/Volumes/&amp;lt;sharename&amp;gt;-1&lt;/code&gt;, &lt;code&gt;/Volumes/&amp;lt;sharename&amp;gt;-2&lt;/code&gt;, etc. Not permanent solution.&lt;/p&gt;

&lt;h3 id=&#34;using-automount&#34;&gt;Using Automount&lt;/h3&gt;

&lt;p&gt;Automount in OS X is pretty well documented. See &lt;code&gt;man auto_master&lt;/code&gt;. On Linux, this is always a nice way to lazily mount a drive on demand when you visit a mapped directory. I thought this would solve my problem.&lt;/p&gt;

&lt;h4 id=&#34;etc-auto-master&#34;&gt;&lt;code&gt;/etc/auto_master&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#
# Automounter master map
#
+auto_master          # Use directory service
/net                  -hosts                -nobrowse,hidefromfinder,nosuid
/home                 auto_home             -nobrowse,hidefromfinder
/Network/Servers      -fstab
/-                    -static
/Volumes/kyle/berunda auto_mount_berunda
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;etc-auto-mount-berunda&#34;&gt;&lt;code&gt;/etc/auto_mount_berunda&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;media    -fstype=smbfs    smb://downloader:v3rysekret@berunda:/&amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;sudo automount -vc&lt;/code&gt; and it&amp;rsquo;s good to go.&lt;/p&gt;

&lt;p&gt;Now, when I &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;/Volumes/kyle/berunda/media&lt;/code&gt;, there is a slight hesitation and the share is mounted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[~] % mount
/dev/disk0s2 on / (hfs, local, journaled)
devfs on /dev (devfs, local, nobrowse)
map -hosts on /net (autofs, nosuid, automounted, nobrowse)
map auto_home on /home (autofs, automounted, nobrowse)
map auto_mount_berunda on /Volumes/kyle/berunda (autofs, automounted, nobrowse)
//downloader@berunda/media on /Volumes/kyle/berunda/media (smbfs, nodev, nosuid, automounted, nobrowse, mounted by kal)

[~] % ls -ld /Volumes/kyle/berunda/media
drwx------  1 kal  wheel    16K Oct 14 23:23 /Volumes/kyle/berunda/media/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was good until sometimes later. I noticed that I can&amp;rsquo;t access that directory anymore. Here is why:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[~] % sudo ls -ld /Volumes/kyle/berunda/media
drwx------  1 root  wheel  16384 Oct 14 23:23 /Volumes/kyle/berunda/media

[~] % mount
...
//downloader@berunda/media on /Volumes/kyle/berunda/media (smbfs, nodev, nosuid, automounted, nobrowse)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So whenever the mount point is unmounted &amp;ndash; due to inactivity or manual &lt;code&gt;umount&lt;/code&gt;, some process owned by &lt;code&gt;root&lt;/code&gt; is accessing the location and remounting it under &lt;code&gt;root&lt;/code&gt;. Preventing me from access it. I wonder what process could that?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[~] % sudo lsof /Volumes/kyle/berunda/media
COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
mds      52 root   16r   DIR  45,10    16384    2 /Volumes/kyle/berunda/media
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mds&lt;/code&gt; is the OS X process used to index your drives and to produce the metadata that Spotlight uses to perform searches. My guess was &lt;code&gt;mds&lt;/code&gt; traversed into the directory and automount, of course, mounted the share.&lt;/p&gt;

&lt;p&gt;Then, I tried to add the directory to the privacy section in Spotlight.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{site.url}}/media/osx-automount-mds-oddity-spotlight-privacy.png&#34; alt=&#34;Spotlight privacy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This didn&amp;rsquo;t help. Neither did completely disabling &lt;code&gt;mds&lt;/code&gt; using &lt;code&gt;mdutil -d /&lt;/code&gt;. I think disabling &lt;code&gt;mds&lt;/code&gt; using &lt;code&gt;sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist&lt;/code&gt; would probably work. But I am not willing to give up Spotlight completely yet.&lt;/p&gt;

&lt;p&gt;So I need another way. Next time I will look into using &lt;code&gt;launchd&lt;/code&gt; and &lt;a href=&#34;http://www.bernhard-baehr.de/&#34;&gt;SleepWatcher&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>