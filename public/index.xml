<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Write More</title>
    <link>http://kal444.github.io/index.xml</link>
    <description>Recent content on Write More</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 15 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://kal444.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Java 8 Features - Lambdas and Method References</title>
      <link>http://kal444.github.io/2014/01/15/java-8-lambdas/</link>
      <pubDate>Wed, 15 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2014/01/15/java-8-lambdas/</guid>
      <description>

&lt;p&gt;After a long wait, Java 8 is finally close to release. I am going to dig through the feature list and learn about the upcoming features. First, the headliner of Java 8 - lambda expressions.&lt;/p&gt;

&lt;h3 id=&#34;lambda-expressions&#34;&gt;Lambda Expressions&lt;/h3&gt;

&lt;p&gt;Lambda expression is a concise way to express an anonymous function. The existing way for Java to pass functions around is using an anonymous inner class. This can be pretty wordy.&lt;/p&gt;


        Callable&lt;String&gt; callable = new Callable&lt;String&gt;() {
            @Override
            public String call() throws Exception {
                return &#34;I am called&#34;;
            }
        };
        callable.call();


&lt;p&gt;In Java 8, this becomes&lt;/p&gt;


        Callable&lt;String&gt; callable = () -&gt; &#34;I am called&#34;;
        callable.call();


&lt;p&gt;Nice and short. On the right hand side, there is no need to specify you are implementing the &lt;code&gt;call()&lt;/code&gt; method on &lt;code&gt;Callable&lt;/code&gt;. The compiler figured that out by inferring the type (&lt;code&gt;Callable&lt;/code&gt;) from the left hand side, which provides the context. There is no need to specify &lt;code&gt;call()&lt;/code&gt; method because it only support interfaces with single public method. The new name for these types of interfaces is &lt;em&gt;functional interfaces&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the simplest case, you don&amp;rsquo;t even need to provide a return statement since the result of the single expression will be used as the value for the return statement. In more complex cases, a block of statements can be provided instead of the expression.&lt;/p&gt;

&lt;p&gt;When there is no left hand side and thus no context to infer the type from, a cast is needed to give the compiler a hint.&lt;/p&gt;


        ((Runnable) () -&gt; {
            System.out.println(&#34;Hi!&#34;);
        }).run();


&lt;h4 id=&#34;method-parameters&#34;&gt;Method Parameters&lt;/h4&gt;

&lt;p&gt;When the implementable method has parameters, they typically don&amp;rsquo;t need to be provided either. The compiler will determine them from the interface method declaration.&lt;/p&gt;


        Comparator&lt;String&gt; comparator = (s1, s2) -&gt; s1.compareToIgnoreCase(s2);


&lt;h4 id=&#34;where-is-this-pointing-to&#34;&gt;Where is this pointing to?&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is a bit tricky inside lambdas. The &lt;code&gt;this&lt;/code&gt; object basically references the enclosing instance. This is different from anonymous inner classes, but it makes perfect sense when you see it.&lt;/p&gt;


public class LambdaTest {
    @Test
    public void simple_lambda() throws Exception {
        // in lambda,
        // scoping causes &#34;this&#34; to point to the instance of LambdaTest instead of the lambda expression itself
        ((Runnable) () -&gt; {
            assertEquals(&#34;LambdaTest&#34;, this.toString());
        }).run();
        // in anonymous inner class, this is different
        // practically, this makes sense, as I can make actual use of &#34;this&#34; in an anon-inner class
        (new Runnable() {
            @Override
            public void run() {
                assertEquals(&#34;Inner&#34;, this.toString());
            }
            @Override
            public String toString() {
                return &#34;Inner&#34;;
            }
        }).run();
    }
    @Override
    public String toString() {
        return LambdaTest.class.getSimpleName();
    }
}


&lt;h4 id=&#34;variable-capture&#34;&gt;Variable capture&lt;/h4&gt;

&lt;p&gt;Just like anonymous inner class, using variable from outside the lambda has restrictions. The compiler is smart enough to know if you are changing the capture variable.&lt;/p&gt;


        int size = 100;
        ((Runnable) () -&gt; System.out.println(size)).run();
        //size++; //this causes a compilation error when uncommented - size needs to be effectively final


&lt;p&gt;Interestingly, you can get around this by using a method reference. I will show an example in the next section.&lt;/p&gt;

&lt;h3 id=&#34;method-references&#34;&gt;Method References&lt;/h3&gt;

&lt;p&gt;Once you can create lambdas, method references make a lot sense. This allows you use an existing method in a lambda like way.&lt;/p&gt;

&lt;p&gt;For example, you can write a lambda like this:&lt;/p&gt;


        Comparator&lt;String&gt; comparator1 = (s1, s2) -&gt; s1.compareToIgnoreCase(s2);


&lt;p&gt;And you can rewrite it using a method reference like this:&lt;/p&gt;


        Comparator&lt;String&gt; comparator2 = String::compareToIgnoreCase;


&lt;p&gt;I was a bit surprised that it figured out Comparator&amp;rsquo;s compare(o1, o2) method maps to o1.compareToIgnoreCase(o2). Based on the spec, the first parameter will be used as the receiver of the method reference and the rest of the parameters will be passed as parameters to the method in the method reference.&lt;/p&gt;

&lt;p&gt;In addition to this format, there are additional syntax to satisfy calling a method reference for an instance, a static method, super class method, constructor and array constructor.&lt;/p&gt;

&lt;p&gt;Calling an instance method on an object has an interesting twist.&lt;/p&gt;


        Set&lt;String&gt; items = Collections.singleton(&#34;OK&#34;);
        Predicate&lt;String&gt; doesContain = items::contains;
        items = Collections.singleton(&#34;NOT OK&#34;);
        assertFalse(items.contains(&#34;OK&#34;));
        assertTrue(doesContain.test(&#34;OK&#34;));


&lt;p&gt;The code above works. This surprised me. I was expecting a compilation error since I made a modification to items. But method reference must be doing something more complex than re-writing as a lambda behind the scene. Very likely, it stored &lt;code&gt;items&lt;/code&gt; object in another reference in the object that represented the method reference.&lt;/p&gt;

&lt;p&gt;It probably looked similar to this:

        Set&lt;String&gt; items = Collections.singleton(&#34;OK&#34;);
        // start of method reference 
        Set&lt;String&gt; reference = items;
        Predicate&lt;String&gt; doesContain = (s) -&gt; reference.contains(s);
        // end of method reference 
        items = Collections.singleton(&#34;NOT OK&#34;);
        assertFalse(items.contains(&#34;OK&#34;));
        assertTrue(doesContain.test(&#34;OK&#34;));
&lt;/p&gt;

&lt;h3 id=&#34;closing&#34;&gt;Closing&lt;/h3&gt;

&lt;p&gt;I am looking forward to using these once Java 8 comes out. Many times, I shun the use of anonymous inner classes for functional logic due to the verbosity (and the ugliness) of the result code. Being able to use lambda and method reference will go a long way to make function style logic clear and concise in Java!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic configuration for a new server using Puppet and Vagrant</title>
      <link>http://kal444.github.io/2013/12/29/vagrant-puppet-server-setup/</link>
      <pubDate>Sun, 29 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/12/29/vagrant-puppet-server-setup/</guid>
      <description>

&lt;p&gt;Recently, I read &lt;a href=&#34;http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers&#34;&gt;My First 5 Minutes On A Server&lt;/a&gt; and &lt;a href=&#34;http://blog.kloudless.com/2013/07/01/automating-development-environments-with-vagrant-and-puppet&#34;&gt;Automating Development Environments with Vagrant and Puppet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the hacker news discussion of the former, someone mentioned maybe what&amp;rsquo;s needed is a starting point with a configuration management tool.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been meaning to find out more &lt;a href=&#34;http://www.vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; and &lt;a href=&#34;http://puppetlabs.com/puppet/puppet-open-source&#34;&gt;Puppet&lt;/a&gt; for a while, so I thought this is a good time to dig in, learn both, and implement the &amp;ldquo;five minutes on a server&amp;rdquo; recommendations in Puppet (with some of my own twists).&lt;/p&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h3&gt;

&lt;p&gt;Creating a configuration management script for a new server doesn&amp;rsquo;t actually involve Vagrant. It&amp;rsquo;s included here because it&amp;rsquo;s an awesome tool to manage virtual machines. This gives you a great way to test out your CM scripts without using an actual server. You do test out your CM script changes before you roll it out to a production server, right?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vagrantup.com/downloads&#34;&gt;Installing Vagrant&lt;/a&gt; is easy. If you are on OS X, I used &lt;a href=&#34;http://brew.sh&#34;&gt;brew&lt;/a&gt; to install Vagrant. Then, you have to install a VM provider. Easiest (i.e. cheapest) one to use is &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;VirtualBox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once they are installed, start VirtualBox at least once as there is a configuration for default VM location. Pick a directory to store you Vagrant configurations (it wouldn&amp;rsquo;t be a bad idea to source control this folder too). Then, run &lt;code&gt;vagrant init&lt;/code&gt;. This will create an initial version of the configuration. Your VM fun starts here. After some tweaking, mine ended up looking like this: &lt;a href=&#34;{{site.url}}/media/puppet/Vagrantfile.txt&#34;&gt;Vagrantfile&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me go through the sections in the file.&lt;/p&gt;

&lt;p&gt;
  config.vm.box = &#34;puppet-labs-ubuntu-server-12042-x64-vbox4210-nocm.&#34;
  config.vm.box_url = &#34;http://puppet-vagrant-boxes.puppetlabs.com/ubuntu-server-12042-x64-vbox4210-nocm.box&#34;

This pulls down the preconfigured base box from puppetlabs.com. This is the blank slate you start with. I used Ubuntu x64 12.04 LTS &lt;em&gt;aka&lt;/em&gt; Precise Pangolin. You can see more base boxes &lt;a href=&#34;http://puppet-vagrant-boxes.puppetlabs.com&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://www.vagrantbox.es&#34;&gt;here&lt;/a&gt;. I also picked the version without any CM software installed. I did this because the reasoning from the &lt;a href=&#34;http://blog.kloudless.com/2013/07/01/automating-development-environments-with-vagrant-and-puppet&#34;&gt;second article&lt;/a&gt; - if you install your own CM software, then you can easily keep it up to date without changing the base box frequently.&lt;/p&gt;

&lt;p&gt;
  config.vm.define :web do |web|
    web.vm.hostname = &#34;dev-www.yellowaxe.vm&#34;
    web.vm.network :private_network, ip: &#34;192.168.33.10&#34;
    web.vm.network :forwarded_port, guest: 80, host: 9080
    web.vm.network :forwarded_port, guest: 443, host: 7043
  end

This section defines a VM and gives it a hostname, IP, and forward some ports. Pretty self-explanatory.&lt;/p&gt;

&lt;p&gt;
  config.vm.provider :virtualbox do |vb|
    vb.customize [&#34;modifyvm&#34;, :id, &#34;--memory&#34;, &#34;1024&#34;]
  end

This section modifies the VM using VirtualBox specific tool. You can do a lot more here. Currently, I just have it increase the memory to 1GB.&lt;/p&gt;

&lt;p&gt;
  # Enable shell provisioning to bootstrap puppet
  config.vm.provision :shell, :path =&gt; &#34;puppet-bootstrap.sh&#34;

This defines the first provisioner for the VM. It takes care of installing the latest version of puppet. The script is essentially the same as the one used in the kloudless article. It looks like this: &lt;a href=&#34;{{site.url}}/media/puppet/puppet-bootstrap.sh.txt&#34;&gt;puppet-bootstrap.sh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
  # Enable provisioning with Puppet stand alone.
  config.vm.provision :puppet do |puppet|
        puppet.manifests_path = &#34;puppet/manifests&#34;
        puppet.manifest_file  = &#34;site.pp&#34;
        puppet.module_path = &#34;puppet/modules&#34;
        puppet.options = &#34;--verbose&#34;
        #puppet.options = &#34;--debug --verbose&#34;
  end

This defines the second provisioner - Puppet. This is the one that gets the work done.&lt;/p&gt;

&lt;h3 id=&#34;puppet&#34;&gt;Puppet&lt;/h3&gt;

&lt;p&gt;Before I jump into the puppet configuration. Here is the directory structure of my puppet files under the Vagrant directory. As you add more puppet modules, there will be more directories.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[~/VMs/Vagrant] % tree puppet/manifests puppet/modules/yellowaxe
puppet/manifests
└── site.pp
puppet/modules/yellowaxe
├── files
│   └── kal
│       └── authorized_keys
└── templates
    ├── 00logwatch.erb
    ├── sshd_config.erb
    └── sudoers.puppet.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;puppet/manifests&lt;/code&gt; typically stores all your &lt;code&gt;*.pp&lt;/code&gt; puppet files. This are the configuration files written in the puppet language. You can break up the &lt;code&gt;site.pp&lt;/code&gt; files into multiple files, but the puppet way is to create modules.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;puppet/modules&lt;/code&gt; stores your own and any third part modules. You can get an idea on the modules available by browsing around &lt;a href=&#34;http://forge.puppetlabs.com&#34;&gt;the forge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The one module I listed is what I created to corral my configurations. For simplicity in this article, I kept all puppet code in &lt;code&gt;site.pp&lt;/code&gt;. In a proper module setup, I would move the various class definitions into their rightful places in the modules directory.&lt;/p&gt;

&lt;p&gt;Here is the full &lt;a href=&#34;{{site.url}}/media/puppet/site.pp.txt&#34;&gt;site.pp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For each section, I will provide a brief explanation on the puppet syntax.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# create a new stage before the main stage
stage { &#39;first&#39;: } -&amp;gt; Stage[&#39;main&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, Puppet only runs 1 stage (think of as a grouping of tasks) and it&amp;rsquo;s the main stage. In my configuration, I&amp;rsquo;d like to run certain tasks before the main stage. So, to guarantee that, I created this new stage called &lt;em&gt;first&lt;/em&gt;. The symbol &lt;code&gt;-&amp;gt;&lt;/code&gt; is a chaining operator. It means: The newly created stage do its thing before the main stage.&lt;/p&gt;

&lt;p&gt;Now, everything is added to main stage by default. So I will point where I have to indicate a certain task needs to be added to the &lt;em&gt;first&lt;/em&gt; stage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::upgrade-all-pacakges {
  # apt-get update &amp;amp;&amp;amp; apt-get upgrade
  # start the process with an updated system
  # this should be run before everything else (main stage)
  exec { &#39;apt-update&#39;:
    command =&amp;gt; &#39;/usr/bin/apt-get update&#39;,
  } -&amp;gt;
  exec { &#39;apt-upgrade&#39;:
    command =&amp;gt; &#39;/usr/bin/apt-get -y upgrade&#39;,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;class&lt;/code&gt; here defines a container of puppet resources. This is just a definition (like how a class in C++, Java is a definition). No action is actually done until you &amp;ldquo;instantiate&amp;rdquo; the class later.&lt;/p&gt;

&lt;p&gt;This is the type of things that will go into a module file.&lt;/p&gt;

&lt;p&gt;The class just runs 2 commands, chained together.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::update-motd {
  file { &#39;/etc/motd&#39;:
    ensure =&amp;gt; file,
    content =&amp;gt; &amp;quot;Welcome!&amp;quot;,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t like to leak too much information in MOTD, so we keep it simple. This also introduces the &lt;em&gt;file&lt;/em&gt; puppet resource. In this case, it ensures the resource specified (using the path in the title section) is present and is a file type. And, the content of file will be updated if necessary to match the inlined simple string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::timezone($timezone = &#39;US/Central&#39;) {
  # configure time zones
  file { &#39;/etc/localtime&#39;:
    ensure =&amp;gt; link,
    target =&amp;gt; &amp;quot;/usr/share/zoneinfo/$timezone&amp;quot;,
  }
  file { &#39;/etc/timezone&#39;:
    content =&amp;gt; &amp;quot;$timezone\n&amp;quot;,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will want to keep your servers on the same timezone generally. This will do that. I put in a default of US Central timezone, because that&amp;rsquo;s where I am.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::ban-failed-logins {
  # block failed logins, default seems decent
  package { &#39;fail2ban&#39;:
    ensure =&amp;gt; installed,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure the fail2ban package is installed. We will go with the default for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::normal-user($username) {
  # creates normal users, add more defaults here
  user { &amp;quot;$username&amp;quot;:
    ensure =&amp;gt; present,
    managehome =&amp;gt; true,
    password =&amp;gt; &#39;*&#39;,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This class will create a normal user, and disable password usage. Home directory will be created if needed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::sudo-user($username) {
  # creates users with sudo access, add more defaults here
  user { &amp;quot;$username&amp;quot;:
    ensure =&amp;gt; present,
    managehome =&amp;gt; true,
    password =&amp;gt; &#39;*&#39;,
    groups =&amp;gt; [&#39;sudo&#39;],
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This class will create a user that can &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::users {
  # disable root password
  # we don&#39;t want root to be used at all
  user { &#39;root&#39;:
    password =&amp;gt; &#39;*&#39;,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Disable root password. While it&amp;rsquo;s an option to just change the root password to a really long and complicated one, there is no reason you ever need to use root if there are multiple sudo-able users. If it is something you must do in the console, there is always single user mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::sudo-config {
  # setup special sudo permissions
  # this allows a user to sudo without password, for example
  file { &#39;/etc/sudoers.d/puppet&#39;:
    ensure =&amp;gt; file,
    content =&amp;gt; template(&#39;yellowaxe/sudoers.puppet.erb&#39;),
    owner =&amp;gt; &#39;root&#39;,
    group =&amp;gt; &#39;root&#39;,
    mode =&amp;gt; &#39;0440&#39;,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to &lt;code&gt;/etc/sudoers&lt;/code&gt;, additional sudo configuration is included from &lt;code&gt;/etc/sudoers.d&lt;/code&gt; directory. Here, we add an additional sudoer configuration. This can be tailored specifically to fit your needs.&lt;/p&gt;

&lt;p&gt;This uses Puppet&amp;rsquo;s &lt;code&gt;template&lt;/code&gt; function to fill out an ERB template file. You can learn more about it &lt;a href=&#34;http://docs.puppetlabs.com/guides/templating.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::push-pubic-keys($username) {
  # push public keys for a given user
  file { &amp;quot;/home/$username/.ssh&amp;quot;:
    ensure =&amp;gt; directory,
    owner =&amp;gt; &amp;quot;$username&amp;quot;,
    group =&amp;gt; &amp;quot;$username&amp;quot;,
    mode =&amp;gt; &#39;0700&#39;,
    require =&amp;gt; User[&amp;quot;$username&amp;quot;],
  }
  file { &amp;quot;/home/$username/.ssh/authorized_keys&amp;quot;:
    ensure =&amp;gt; file,
    source =&amp;gt; &amp;quot;puppet:///modules/yellowaxe/$username/authorized_keys&amp;quot;,
    owner =&amp;gt; &amp;quot;$username&amp;quot;,
    group =&amp;gt; &amp;quot;$username&amp;quot;,
    mode =&amp;gt; &#39;0600&#39;,
    require =&amp;gt; File[&amp;quot;/home/$username/.ssh&amp;quot;],
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since all passwords are disabled, we will be using public/private keys with SSH. If you have users that already have public keys available, this allows you push them right now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::ssh {
  # locking down SSH
  # Only thing changed is to disable root login and disallow passwords
  package { &#39;openssh-server&#39;:
    ensure =&amp;gt; installed,
  } -&amp;gt;
  file { &#39;sshd_config&#39;:
    path =&amp;gt; &#39;/etc/ssh/sshd_config&#39;,
    ensure  =&amp;gt; file,
    content =&amp;gt; template(&#39;yellowaxe/sshd_config.erb&#39;),
    owner =&amp;gt; &#39;root&#39;,
    group =&amp;gt; &#39;root&#39;,
    mode =&amp;gt; &#39;0640&#39;,
  } ~&amp;gt;
  service { &#39;sshd&#39;:
    name =&amp;gt; &#39;ssh&#39;,
    ensure =&amp;gt; running,
    enable =&amp;gt; true,
    hasstatus =&amp;gt; true,
    hasrestart =&amp;gt; true,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This locks down SSH configuration according to your needs. The template sshd_config file just have root login and password login disabled. You can add more of course.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::firewall-rules {
  $ufw_bin = &#39;/usr/sbin/ufw&#39;
  # setup firewall rules
  package { &#39;ufw&#39;:
    ensure =&amp;gt; present,
  } -&amp;gt;
  exec { &amp;quot;$ufw_bin --force reset&amp;quot;: } -&amp;gt;
  exec { &amp;quot;$ufw_bin default deny incoming&amp;quot;: } -&amp;gt;
  exec { &amp;quot;$ufw_bin default allow outgoing&amp;quot;: } -&amp;gt;
  exec { &amp;quot;$ufw_bin allow http/tcp&amp;quot;: } -&amp;gt;
  exec { &amp;quot;$ufw_bin allow https/tcp&amp;quot;: } -&amp;gt;
  exec { &amp;quot;$ufw_bin allow ssh/tcp&amp;quot;: } -&amp;gt;
  exec { &amp;quot;$ufw_bin limit ssh/tcp&amp;quot;: } -&amp;gt;
  exec { &amp;quot;$ufw_bin --force enable&amp;quot;: }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ufw&lt;/code&gt; is super easy to use, this is series of commands to reset and configure the firewall using &lt;code&gt;ufw&lt;/code&gt;. It places a connection rate limit on the ssh port as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::enable-auto-security-updates {
  # defaults on ubuntu precise is already security only
  package { &#39;unattended-upgrades&#39;:
    ensure =&amp;gt; installed,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unattended upgrades isn&amp;rsquo;t suitable for all situations. For a small shop, it&amp;rsquo;s much better to have it on than depending on someone to do securities upgrade manually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::logwatch {
  # configure log watcher to email us
  package { &#39;logwatch&#39;:
    ensure =&amp;gt; installed,
  } -&amp;gt;
  file { &#39;00logwatch&#39;:
    path =&amp;gt; &#39;/etc/cron.daily/00logwatch&#39;,
    ensure  =&amp;gt; file,
    content =&amp;gt; template(&#39;yellowaxe/00logwatch.erb&#39;),
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Very basic tool to monitor logs daily. The template adds the command to mail the report to me.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::zsh {
  # I like zsh
  package { &#39;zsh&#39;:
    ensure =&amp;gt; installed,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I do like zsh.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class yellowaxe::zsh-user ($username) {
  # override the given user with zsh
  User &amp;lt;| title == &amp;quot;$username&amp;quot; |&amp;gt; {
    shell =&amp;gt; &#39;/usr/bin/zsh&#39;,
    require =&amp;gt; Package[&#39;zsh&#39;],
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we have zsh, some user would prefer to have this instead of the default shell. This uses a special collector syntax to override the user resource configuration. This might not be the most &amp;ldquo;puppet&amp;rdquo; way to do this, but it&amp;rsquo;s pretty straightforward for me to understand.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node default {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A node in puppet term is a server. The &lt;code&gt;node&lt;/code&gt; keyword can specifies 1 or more multiple servers. &lt;code&gt;default&lt;/code&gt; is a special keyword that will match against any unspecified servers. Since I have only 1 server right now, I went ahead with default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  class { &#39;yellowaxe::upgrade-all-pacakges&#39;:
    stage =&amp;gt; first
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This forces &lt;code&gt;upgrade-all-packages&lt;/code&gt; to run in the &lt;em&gt;first&lt;/em&gt; stage instead of the main stage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  include yellowaxe::update-motd
  include yellowaxe::timezone
  include yellowaxe::ban-failed-logins
  include yellowaxe::users
  include yellowaxe::sudo-config
  include yellowaxe::ssh
  include yellowaxe::logwatch
  include yellowaxe::firewall-rules
  include yellowaxe::enable-auto-security-updates
  include yellowaxe::zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a simple way to apply (e.g. instantiates) the class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  class { &#39;yellowaxe::normal-user&#39;:
    username =&amp;gt; &#39;app&#39;,
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, normal-user is used, but supplied with a new user name as &amp;ldquo;app&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The rest of the file is more of the same and you can see some additional modules that I have commented out, but can be used depending on the purpose of the server.&lt;/p&gt;

&lt;h3 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;With this file and the supporting templates in place, Vagrant can now use all the pieces to provision the server. This as simple as running &lt;code&gt;vagrant up&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This Vagrant and Puppet setup allows you to easily stand up and tear down development servers as VMs for testing. When it comes to deploying a production server, you will be faced with a blank server and the sequence becomes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;puppet-bootstrap.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;your_tested_puppet_configuration_repo&amp;gt;&lt;/code&gt; or copy over the puppet configuration via other means&lt;/li&gt;
&lt;li&gt;then &lt;code&gt;puppet apply &amp;lt;path_to_site.pp&amp;gt;&lt;/code&gt; (the default modules directory is /etc/puppet/modules)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a puppet standalone setup. Puppet can also operate in a master/agent configuration and will allow you to execute puppet configuration remotely. I don&amp;rsquo;t see myself needing a master/agent setup anytime soon.&lt;/p&gt;

&lt;h3 id=&#34;closing&#34;&gt;Closing&lt;/h3&gt;

&lt;p&gt;Vagrant is so nice. Simple and easy to learn. If you know even just a little ruby, the configurations will be very clear to you. It&amp;rsquo;s too bad I took this long to try it.&lt;/p&gt;

&lt;p&gt;It was pretty easy to learn enough Puppet in a day to put this together. In the process, I definitely feel there are some dissonances to using Puppet for me.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a new language isn&amp;rsquo;t easy. The Puppet DSL has several gotchas (class inheritance oddities). Would using straight ruby avoid this kind of issues?&lt;/li&gt;
&lt;li&gt;I do appreciate the fact that sysadmins don&amp;rsquo;t need to be programmers use Puppet, but I wonder how far you can take that. Good sysadmins are very paranoid people, I would be pretty leery of using third party modules without fully understanding what it&amp;rsquo;s doing. And that means you will need to read and possibly modify ruby code.&lt;/li&gt;
&lt;li&gt;Having to use the Puppet language for definitions and having to use ruby for extensions to the system result in making some simple things more difficult. For example, in the user resource, I would have wanted to randomly generate a password and assign it to the user. This can be done simply using &lt;code&gt;pwgen&lt;/code&gt; and &lt;code&gt;mkpasswd&lt;/code&gt;, but there isn&amp;rsquo;t a way for me to capture output of a command as a variable. I would have to write a custom function in ruby.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am curious to see how &lt;a href=&#34;http://docs.opscode.com&#34;&gt;Chef&lt;/a&gt; and &lt;a href=&#34;http://www.ansibleworks.com&#34;&gt;Ansible&lt;/a&gt; compare to Puppet. Maybe next time.&lt;/p&gt;

&lt;h3 id=&#34;appendix-of-all-files&#34;&gt;Appendix of all files&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;{{site.url}}/media/puppet/Vagrantfile.txt&#34;&gt;Vagrantfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;{{site.url}}/media/puppet/puppet-bootstrap.sh.txt&#34;&gt;puppet-bootstrap.sh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;{{site.url}}/media/puppet/site.pp.txt&#34;&gt;site.pp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How does Amazon app store work?</title>
      <link>http://kal444.github.io/2013/12/15/amazon-app-store/</link>
      <pubDate>Sun, 15 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/12/15/amazon-app-store/</guid>
      <description>&lt;p&gt;Over Black Friday, I bought a Kindle Fire HDX. Nice little device to along an Amazon prime membership.&lt;/p&gt;

&lt;p&gt;Yesterday, I was setting up the device to match what I use on my iPad. Part of this involved buying Instapaper so that I can get my readings done.&lt;/p&gt;

&lt;p&gt;Here is how the process went.&lt;/p&gt;

&lt;p&gt;On activating the device, Amazon sent me 500 &lt;em&gt;Amaozn Coins&lt;/em&gt;. This can be used for App store (and others) purchases.&lt;/p&gt;

&lt;p&gt;I saw Instapaper costing $2.99&lt;/p&gt;

&lt;p&gt;So I spent 299 + 25 (tax) = 324 coins when I purchased it.&lt;/p&gt;

&lt;p&gt;This triggered a promotion and returned 250 + 90 = 340 coins to me.&lt;/p&gt;

&lt;p&gt;So I actually made 16 coins on this transaction!&lt;/p&gt;

&lt;p&gt;I wonder how much is the payout to the author.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Combine OS X default wallpapers with customized ones</title>
      <link>http://kal444.github.io/2013/10/27/bring-together-desktop-pictures/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/10/27/bring-together-desktop-pictures/</guid>
      <description>&lt;p&gt;I just upgraded to OS X Mavericks, but this applied equally to OS X Mountain Lion.&lt;/p&gt;

&lt;p&gt;As it turns out, in addition the default desktop wallpapers included by Apple, there are a set of images to be used by the screen saver. These are great as desktop wallpapers too!&lt;/p&gt;

&lt;p&gt;You can find where there are here: &lt;a href=&#34;http://apple.stackexchange.com/a/106039&#34;&gt;Secret Wallpapers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, that&amp;rsquo;s not what this post is about.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say you want to use those pictures AND you want to use the default ones in a rotational setting. Since you can&amp;rsquo;t move the desktop pictures folder from Apple to Folders, you can only pick either you own folders or the Apple one.
&lt;img src=&#34;{{site.url}}/media/desktop-pictures.jpg&#34; alt=&#34;Desktop Pictures&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to make a copy of the provided desktop pictures. First I tried to create a symbolic link to the Desktop Pictures directory, but Desktop &amp;amp; Screen Saver dialog is smart enough to know that it&amp;rsquo;s the same folder as the one under Apple.&lt;/p&gt;

&lt;p&gt;This works though:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/Pictures/Apple\ Provided
cd ~/Pictures/Apple\ Provided
for i in /Library/Desktop\ Pictures/*.jpg; do ln -s &amp;quot;$i&amp;quot; &amp;quot;`basename $i`&amp;quot; ; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, add &lt;code&gt;~/Pictures/Apple\ Provided&lt;/code&gt; to Folders and select Folders.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RVM wrangling on OS X</title>
      <link>http://kal444.github.io/2013/10/25/rvm-wrangling/</link>
      <pubDate>Fri, 25 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/10/25/rvm-wrangling/</guid>
      <description>&lt;p&gt;As part of setting up Jekyll to run this blog, I needed to install several gems. I already have &lt;a href=&#34;https://rvm.io/&#34;&gt;RVM&lt;/a&gt; installed.&lt;/p&gt;

&lt;p&gt;While installing RedCloth, I get this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Installing RedCloth (4.2.9)
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.

    /Users/kal/.rvm/rubies/ruby-2.0.0-p247/bin/ruby extconf.rb
checking for main() in -lc... *** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
...
/Users/kal/.rvm/rubies/ruby-2.0.0-p247/lib/ruby/2.0.0/mkmf.rb:434:in `try_do&#39;: The compiler failed to generate an executable file. (RuntimeError)
You have to install development tools first.
...
Gem files will remain installed in /Users/kal/.rvm/gems/ruby-2.0.0-p247/gems/RedCloth-4.2.9 for inspection.
Results logged to /Users/kal/.rvm/gems/ruby-2.0.0-p247/gems/RedCloth-4.2.9/ext/redcloth_scan/gem_make.out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm, I thought I already installed development tools (Xcode on OS X).&lt;/p&gt;

&lt;p&gt;I typed &lt;code&gt;gcc&lt;/code&gt;. &amp;ldquo;command not found&amp;rdquo;. Odd.&lt;/p&gt;

&lt;p&gt;Oh, look at this, Xcode was just updated and I don&amp;rsquo;t have the command line tools&lt;/p&gt;

&lt;p&gt;In Xcode 5, go to &lt;code&gt;Preferences... -&amp;gt; Downloads&lt;/code&gt; and try download the command line tools. Hah, I need to sign up with an Apple developer account. Here is the &lt;a href=&#34;https://developer.apple.com/register/&#34;&gt;link&lt;/a&gt; to register as an Apple developer for free.&lt;/p&gt;

&lt;p&gt;Finally, command line tools are installed.&lt;/p&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm get head 
rvm reinstall 2.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, install the gems again. Success!&lt;/p&gt;

&lt;p&gt;P.S. During this episode, I learned about &lt;a href=&#34;https://github.com/sstephenson/rbenv&#34;&gt;rbenv&lt;/a&gt; via some google battles. Looks really good, and I am going to switch to it instead of RVM.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mount shares on OS X on Login and Wakeup</title>
      <link>http://kal444.github.io/2013/10/24/mount-shares-on-login-wakeup/</link>
      <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/10/24/mount-shares-on-login-wakeup/</guid>
      <description>

&lt;p&gt;I bought a macbook air recently. This is my first mac, but I am very familiar with Unix/Linux. This is part of a series of posts on using OS X (Mountain Lion).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;{{site.url}}/osx-automount-mds-oddity/&#34;&gt;Last time&lt;/a&gt;, I wanted to use automount to mount a Samba share at a fixed location. It didn&amp;rsquo;t work as I expected.&lt;/p&gt;

&lt;p&gt;This time around, I am going to go the simple route and use &lt;code&gt;launchd&lt;/code&gt; to mount the share whenever I login.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;launchd &amp;ndash; System wide and per-user daemon/agent manager&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, you can use launchd to launch things. :) It&amp;rsquo;s great!&lt;/p&gt;

&lt;h3 id=&#34;launch-a-script-at-login&#34;&gt;Launch a script at login&lt;/h3&gt;

&lt;p&gt;According to &lt;code&gt;man launchd&lt;/code&gt;, user specific launching instructions are stored in &lt;code&gt;~/Library/LaunchAgents&lt;/code&gt;. It&amp;rsquo;s pretty easy to figure out the syntax just by looking at the examples that&amp;rsquo;s already there. But for the comprehensive explanation on the plist format for &lt;code&gt;launchd&lt;/code&gt;, look at &lt;code&gt;man launchd.plist&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I ended up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
	&amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;com.yellowaxe.berunda-mounts&amp;lt;/string&amp;gt;
	&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
	&amp;lt;array&amp;gt;
		&amp;lt;string&amp;gt;/Users/kal/usr/bin/berunda-mount-shares&amp;lt;/string&amp;gt;
	&amp;lt;/array&amp;gt;
	&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s important to put in the full path to your script instead of &lt;code&gt;~kal/usr/bin/berunda-mount-shares&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can then load this .plist file using &lt;code&gt;launchctl load ~/Library/LaunchAgents/&amp;lt;plist-file-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;berunda-mount-shares&#34;&gt;&lt;code&gt;berunda-mount-shares&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

for i in `seq 1 9`; do
  # wait until interface is active again.
  # is there a better way to do this?
  ifconfig en0 | grep -q &#39;status: active&#39; &amp;amp;&amp;amp; break;
  sleep 5
done

ping -q -c1 berunda &amp;gt;/dev/null || exit; # server not up

pw=$(security find-internet-password -w -a kal -s berunda)

mount | grep -q /opt/kyle/berunda/media &amp;amp;&amp;amp; exit; # already mounted
mount -t smbfs smb://kal:$pw@berunda/media /opt/kyle/berunda/media
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The for loop is put in to wait for the network interface to become active. This seems to be needed more for the wakeup step. I added some additional changes for server&amp;rsquo;s status and if the mount is already there.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;security find-internet-password&lt;/code&gt; is a great way to find your password in the OS X keychain. You do have to store the password in the keychain first&amp;hellip; The easiest way is to mount the share in Finder and have it remember your password.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that the mount command WILL expose your password on the command line (briefly) since it passes the password to &lt;code&gt;mount_smbfs&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;launching-a-script-when-the-laptop-wakes-up&#34;&gt;Launching a script when the laptop wakes up&lt;/h3&gt;

&lt;p&gt;For completeness, I wanted to unmount a share when the computer sleeps and remount it when the computer wakes back up. For this, I turn to: &lt;a href=&#34;http://www.bernhard-baehr.de/&#34;&gt;SleepWatcher&lt;/a&gt;. However, I am not going to install it from the site&amp;hellip;&lt;/p&gt;

&lt;p&gt;Thanks to a friend, I was turned onto &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. It&amp;rsquo;s a simple &lt;code&gt;brew install sleepwatcher&lt;/code&gt; to install this.&lt;/p&gt;

&lt;p&gt;Running SleepWatcher involves our old friend &lt;code&gt;launchd&lt;/code&gt; again. Here is the .plist file to use.&lt;/p&gt;

&lt;h4 id=&#34;de-bernhard-baehr-sleepwatcher-plist&#34;&gt;&lt;code&gt;de.bernhard-baehr.sleepwatcher.plist&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple Computer//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
	&amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;de.bernhard-baehr.sleepwatcher&amp;lt;/string&amp;gt;
	&amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
	&amp;lt;array&amp;gt;
		&amp;lt;string&amp;gt;/usr/local/sbin/sleepwatcher&amp;lt;/string&amp;gt;
		&amp;lt;string&amp;gt;-V&amp;lt;/string&amp;gt;
                &amp;lt;string&amp;gt;-s /Users/kal/usr/bin/on-sleep&amp;lt;/string&amp;gt;
                &amp;lt;string&amp;gt;-w /Users/kal/usr/bin/on-wakeup&amp;lt;/string&amp;gt;
	&amp;lt;/array&amp;gt;
	&amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;
	&amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;
	&amp;lt;true/&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;on-wakeup&lt;/code&gt; just simply calls &lt;code&gt;~kal/usr/bin/berunda-mount-shares&lt;/code&gt; and &lt;code&gt;on-sleep&lt;/code&gt; calls &lt;code&gt;~kal/usr/bin/berunda-umount-shares&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And to finish this out.&lt;/p&gt;

&lt;h4 id=&#34;berunda-umount-shares&#34;&gt;&lt;code&gt;berunda-umount-shares&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

ping -q -c1 berunda &amp;gt;/dev/null || exit; # server not up

mount | grep -q /opt/kyle/berunda/media || exit; # already unmounted
umount /opt/kyle/berunda/media
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, this has been working great.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automount Oddity in OS X with Spotlight metadata server (mds)</title>
      <link>http://kal444.github.io/2013/10/19/osx-automount-mds-oddity/</link>
      <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/10/19/osx-automount-mds-oddity/</guid>
      <description>

&lt;p&gt;I bought a macbook air recently. This is my first mac, but I am very familiar with Unix/Linux. This is part of a series of posts on using OS X (Mountain Lion).&lt;/p&gt;

&lt;h3 id=&#34;a-simple-thing&#34;&gt;A Simple Thing&lt;/h3&gt;

&lt;p&gt;I have a NAS with a Samba share that I&amp;rsquo;d like to mount on the mac at a &lt;em&gt;fixed location&lt;/em&gt; and have it to be usable by my user &lt;em&gt;always&lt;/em&gt;. The same share might be mounted by another user on the same mac, but it can be at a different mount point. This simplifies things a bit. The mount point doesn&amp;rsquo;t have to have open permission for all users.&lt;/p&gt;

&lt;h3 id=&#34;using-finder&#34;&gt;Using Finder&lt;/h3&gt;

&lt;p&gt;Using Finder, the first attempt is to use &lt;code&gt;Go -&amp;gt; Connect To Server...&lt;/code&gt;. This automatically puts the mount as &lt;code&gt;/Volumes/&amp;lt;sharename&amp;gt;&lt;/code&gt;. Not so bad if you have only 1 share to deal with. But if multiple users try to mount the same share, you will end up with &lt;code&gt;/Volumes/&amp;lt;sharename&amp;gt;-1&lt;/code&gt;, &lt;code&gt;/Volumes/&amp;lt;sharename&amp;gt;-2&lt;/code&gt;, etc. Not permanent solution.&lt;/p&gt;

&lt;h3 id=&#34;using-automount&#34;&gt;Using Automount&lt;/h3&gt;

&lt;p&gt;Automount in OS X is pretty well documented. See &lt;code&gt;man auto_master&lt;/code&gt;. On Linux, this is always a nice way to lazily mount a drive on demand when you visit a mapped directory. I thought this would solve my problem.&lt;/p&gt;

&lt;h4 id=&#34;etc-auto-master&#34;&gt;&lt;code&gt;/etc/auto_master&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#
# Automounter master map
#
+auto_master          # Use directory service
/net                  -hosts                -nobrowse,hidefromfinder,nosuid
/home                 auto_home             -nobrowse,hidefromfinder
/Network/Servers      -fstab
/-                    -static
/Volumes/kyle/berunda auto_mount_berunda
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;etc-auto-mount-berunda&#34;&gt;&lt;code&gt;/etc/auto_mount_berunda&lt;/code&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;media    -fstype=smbfs    smb://downloader:v3rysekret@berunda:/&amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;sudo automount -vc&lt;/code&gt; and it&amp;rsquo;s good to go.&lt;/p&gt;

&lt;p&gt;Now, when I &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;/Volumes/kyle/berunda/media&lt;/code&gt;, there is a slight hesitation and the share is mounted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[~] % mount
/dev/disk0s2 on / (hfs, local, journaled)
devfs on /dev (devfs, local, nobrowse)
map -hosts on /net (autofs, nosuid, automounted, nobrowse)
map auto_home on /home (autofs, automounted, nobrowse)
map auto_mount_berunda on /Volumes/kyle/berunda (autofs, automounted, nobrowse)
//downloader@berunda/media on /Volumes/kyle/berunda/media (smbfs, nodev, nosuid, automounted, nobrowse, mounted by kal)

[~] % ls -ld /Volumes/kyle/berunda/media
drwx------  1 kal  wheel    16K Oct 14 23:23 /Volumes/kyle/berunda/media/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was good until sometimes later. I noticed that I can&amp;rsquo;t access that directory anymore. Here is why:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[~] % sudo ls -ld /Volumes/kyle/berunda/media
drwx------  1 root  wheel  16384 Oct 14 23:23 /Volumes/kyle/berunda/media

[~] % mount
...
//downloader@berunda/media on /Volumes/kyle/berunda/media (smbfs, nodev, nosuid, automounted, nobrowse)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So whenever the mount point is unmounted &amp;ndash; due to inactivity or manual &lt;code&gt;umount&lt;/code&gt;, some process owned by &lt;code&gt;root&lt;/code&gt; is accessing the location and remounting it under &lt;code&gt;root&lt;/code&gt;. Preventing me from access it. I wonder what process could that?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[~] % sudo lsof /Volumes/kyle/berunda/media
COMMAND PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
mds      52 root   16r   DIR  45,10    16384    2 /Volumes/kyle/berunda/media
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mds&lt;/code&gt; is the OS X process used to index your drives and to produce the metadata that Spotlight uses to perform searches. My guess was &lt;code&gt;mds&lt;/code&gt; traversed into the directory and automount, of course, mounted the share.&lt;/p&gt;

&lt;p&gt;Then, I tried to add the directory to the privacy section in Spotlight.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{site.url}}/media/osx-automount-mds-oddity-spotlight-privacy.png&#34; alt=&#34;Spotlight privacy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This didn&amp;rsquo;t help. Neither did completely disabling &lt;code&gt;mds&lt;/code&gt; using &lt;code&gt;mdutil -d /&lt;/code&gt;. I think disabling &lt;code&gt;mds&lt;/code&gt; using &lt;code&gt;sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist&lt;/code&gt; would probably work. But I am not willing to give up Spotlight completely yet.&lt;/p&gt;

&lt;p&gt;So I need another way. Next time I will look into using &lt;code&gt;launchd&lt;/code&gt; and &lt;a href=&#34;http://www.bernhard-baehr.de/&#34;&gt;SleepWatcher&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Post</title>
      <link>http://kal444.github.io/2013/10/18/testing-post/</link>
      <pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://kal444.github.io/2013/10/18/testing-post/</guid>
      <description>

&lt;h1 id=&#34;heading-1&#34;&gt;Heading 1&lt;/h1&gt;

&lt;h2 id=&#34;heading-2&#34;&gt;Heading 2&lt;/h2&gt;

&lt;h3 id=&#34;heading-3&#34;&gt;Heading 3&lt;/h3&gt;

&lt;h4 id=&#34;heading-4&#34;&gt;Heading 4&lt;/h4&gt;

&lt;h5 id=&#34;heading-5&#34;&gt;Heading 5&lt;/h5&gt;

&lt;h6 id=&#34;heading-6&#34;&gt;Heading 6&lt;/h6&gt;

&lt;h3 id=&#34;body-text&#34;&gt;Body text&lt;/h3&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, test link adipiscing elit. &lt;strong&gt;This is strong&lt;/strong&gt;. Nullam dignissim convallis est. Quisque aliquam.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{site.url}}/images/avatar.jpg&#34; alt=&#34;Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is emphasized&lt;/em&gt;. Donec faucibus. Nunc iaculis suscipit dui. 53 = 125. Water is H&lt;sub&gt;2&lt;/sub&gt;O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. The New York Times &lt;cite&gt;(That’s a citation)&lt;/cite&gt;. &lt;u&gt;Underline&lt;/u&gt;. Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.&lt;/p&gt;

&lt;p&gt;HTML and &lt;abbr title=&#34;cascading stylesheets&#34;&gt;CSS&lt;abbr&gt; are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus.&lt;/p&gt;

&lt;h3 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, test link adipiscing elit. Nullam dignissim convallis est. Quisque aliquam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;list-types&#34;&gt;List Types&lt;/h2&gt;

&lt;h3 id=&#34;ordered-lists&#34;&gt;Ordered Lists&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Item one

&lt;ol&gt;
&lt;li&gt;sub item one&lt;/li&gt;
&lt;li&gt;sub item two&lt;/li&gt;
&lt;li&gt;sub item three&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Item two&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;unordered-lists&#34;&gt;Unordered Lists&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Item one&lt;/li&gt;
&lt;li&gt;Item two&lt;/li&gt;
&lt;li&gt;Item three&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tables&#34;&gt;Tables&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Header1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Header2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Header3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cell1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;cell2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;cell3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;cell4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;cell5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;cell6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;code-snippets&#34;&gt;Code Snippets&lt;/h2&gt;

&lt;p&gt;Syntax highlighting via Pygments&lt;/p&gt;


#container {
  float: left;
  margin: 0 -240px 0 0;
  width: 100%;
}


&lt;p&gt;Non Pygments code example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;awesome&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;This is great isn&#39;t it?&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;buttons&#34;&gt;Buttons&lt;/h2&gt;

&lt;p&gt;Make any link standout more when applying the &lt;code&gt;.btn&lt;/code&gt; class.&lt;/p&gt;


&lt;a href=&#34;#&#34; class=&#34;btn btn-success&#34;&gt;Success Button&lt;/a&gt;


&lt;div markdown=&#34;0&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;btn&#34;&gt;Primary Button&lt;/a&gt;&lt;/div&gt;
&lt;div markdown=&#34;0&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;btn btn-success&#34;&gt;Success Button&lt;/a&gt;&lt;/div&gt;
&lt;div markdown=&#34;0&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;btn btn-warning&#34;&gt;Warning Button&lt;/a&gt;&lt;/div&gt;
&lt;div markdown=&#34;0&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;btn btn-danger&#34;&gt;Danger Button&lt;/a&gt;&lt;/div&gt;
&lt;div markdown=&#34;0&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;btn btn-info&#34;&gt;Info Button&lt;/a&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>